#!/usr/bin/python
# coding=utf-8

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.util import dumpNodeConnections
from mininet.log import setLogLevel
from mininet.node import Controller
from random import randint
from array import array

import sys
import os

class POXBridge( Controller ):
	"Custom Controller class to invoke POX forwarding.l2_learning"
	def start( self ):
		"Start POX learning switch"
		self.pox = '%s/pox/pox.py' % os.environ[ 'HOME' ]
		self.cmd( self.pox, 'forwarding.l2_learning &' )
	def stop( self ):
		"Stop POX"
		self.cmd( 'kill %' + self.pox )

controllers = { 'poxbridge': POXBridge }

class generateTopoFromArrays(Topo):
	def __init__(self, hosts, switches, links, **opts):
		# Initialize topology and default options
		Topo.__init__(self, **opts)

		for s in switches:
			self.addSwitch(s)

		for h in hosts:
			self.addHost(h)
		
		for l in links:
			self.addLink(l.src, l.dst)

def setupNetworkLinks( net, topo, links ):
	for l in links:
		topo.setlinkInfo(l.src, l.dst, (randint(1, 5)*10))


def createHost(i): return 'h%s' % i
def createSwitch(i): return 's%s' % i
def createRandomLink(h, s):
	if randint(1, 100) > 60:
		print "****", (h, s)
		return (h, s)
	return None

def simpleTest(n, k = 0):

	switches = map(createSwitch, range(1, (n+1)))
	hosts = map(createHost, range(1, (n+1)*3))
	
	
	links = []
	for s in switches:
		for h in hosts:
			l = createRandomLink(h = h, s = s)
			if l <> None:
				links.append(l)

	topo = generateTopoFromArrays(hosts = hosts, switches = switches, links = links)
	#net = Mininet( topo=topo, controller=POXBridge, cleanup=True)
	net = Mininet( topo=topo, cleanup=True)
	net.start()
	
	setupNetworkLinks( net, topo, links )
	
	for h in hosts:
		print "Host", h.name, " ip:", h.IP(), "meta: ", topo.linkInfo(h.name, sw.name)

	net.stop()

if __name__ == '__main__':
	# Tell mininet to print useful information
	setLogLevel('info')
	simpleTest(int(sys.argv[1]))
